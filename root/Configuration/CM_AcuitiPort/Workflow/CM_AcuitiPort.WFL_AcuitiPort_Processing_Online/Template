<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<exportmultiplex category="Template" ref_path="workflow_data[Internal]/storable[workflow_data]/storable[Data]">
   <list classname="java.util.ArrayList" name="Comments"/>
   <storable name="Execution Config" storable-id="dr.WorkflowExecutionConfig" ver="10.0">
      <enum name="debugType" storable-id="dr.DebugType" value="FILE"/>
      <storable name="executionSettings" storable-id="dr.ExecutionSettings" ver="10.0">
         <boolean name="enabled" value="false"/>
      </storable>
      <int name="noOfFilesToKeep" value="1"/>
      <string name="throughputMIM" null="true"/>
      <string name="txnHandler" value="Default Handler"/>
   </storable>
   <list classname="java.util.ArrayList" name="Field Types">
      <storable name="0" storable-id="dr.WorkflowData$FieldAndType" ver="1.3">
         <string name="Exported Alias" value=""/>
         <string name="Exported Description" value=""/>
         <string name="Field Name" value="Source - Directory"/>
         <enum name="Field Type" storable-id="dr.DRFieldInstanceType" value="INSTANCE"/>
         <int name="Node Id" value="672577418"/>
         <string name="Node Name" value="From_Filter"/>
      </storable>
      <storable name="1" storable-id="dr.WorkflowData$FieldAndType" ver="1.3">
         <string name="Exported Alias" value=""/>
         <string name="Exported Description" value=""/>
         <string name="Field Name" value="Source - Filename"/>
         <enum name="Field Type" storable-id="dr.DRFieldInstanceType" value="INSTANCE"/>
         <int name="Node Id" value="672577418"/>
         <string name="Node Name" value="From_Filter"/>
      </storable>
      <storable name="2" storable-id="dr.WorkflowData$FieldAndType" ver="1.3">
         <string name="Exported Alias" value=""/>
         <string name="Exported Description" value=""/>
         <string name="Field Name" value="Disk - Directory"/>
         <enum name="Field Type" storable-id="dr.DRFieldInstanceType" value="INSTANCE"/>
         <int name="Node Id" value="-279974329"/>
         <string name="Node Name" value="auditDir"/>
      </storable>
   </list>
   <list classname="java.util.ArrayList" name="Logged error MIM"/>
   <list classname="java.util.ArrayList" name="Nodes">
      <storable name="0" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname"><![CDATA[com.digitalroute.batchrt.coll.disk.BatchCollRtDiskInsp]]></string>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="4">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.batchrt.coll.disk.BatchCollRtDiskInsp]]></string>
               <storable name="Data" storable-id="dr.batchcollrt.BatchCollRtBaseData" ver="20.0">
                  <storable name="agentData" storable-id="dr.DiskAdvInputData" ver="10.0">
                     <string name="collectionStrategyName" null="true"/>
                     <boolean name="routeFileRef" value="false"/>
                     <array classname="java.lang.String" name="strategyClasses" size="2">
                        <string name="0" value="com.digitalroute.misc.advcoll.impl.DefaultFileInfo"/>
                        <string name="1"><![CDATA[com.digitalroute.misc.advcoll.impl.DefaultSourceFileHandling]]></string>
                     </array>
                     <string name="strategyCombinationClass"><![CDATA[com.digitalroute.misc.advcoll.impl.DefaultCollectionStrategy]]></string>
                     <array classname="com.digitalroute.devkit.storable.DRStorable" name="strategyConfigs" size="2">
                        <storable name="0" storable-id="dr.DefaultFileInfoConfig" ver="10.0">
                           <string name="baseDir" value="/home/mzadmin/AcuitiPort/Container/Val_out"/>
                           <enum name="compType" storable-id="dr.CompressionType" value="NONE"/>
                           <string name="fileRegExp" value="OUTPUT_*.*"/>
                           <boolean name="subfolders" value="false"/>
                        </storable>
                        <storable name="1" storable-id="dr.DefaultSourceFileHandlingConfig" ver="10.0">
                           <int name="idleTime" value="0"/>
                           <boolean name="moveBeforeRetrieval" value="false"/>
                           <string name="moveSuffix" value=""/>
                           <string name="rbDirectory" value=""/>
                           <int name="rbKeepInterval" value="-1"/>
                           <string name="rbRenamePrefix" value=""/>
                           <string name="rbRenameSuffix" value=""/>
                           <string name="rbReplace" value=""/>
                           <string name="rbSearch" value=""/>
                           <enum name="rbType" storable-id="dr.RetrievalType" value="REMOVE"/>
                        </storable>
                     </array>
                  </storable>
                  <int name="cancelBatchCount" value="0"/>
                  <enum name="cancelBatchType" storable-id="dr.CancelBatchType" value="NEVER_ABORT"/>
                  <int name="errorMode" value="1"/>
                  <int name="repeatInterval" value="5"/>
               </storable>
            </storable>
            <storable name="1" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.devkit.wf.DRFileInfoSortOrderServiceInsp]]></string>
               <storable name="Data" storable-id="dr.DRFileInfoSortOrderServiceConfig" ver="10.0">
                  <boolean name="enabled" value="false"/>
                  <boolean name="ignoreCase" value="false"/>
                  <int name="length" value="0"/>
                  <enum name="orderType" storable-id="dr.DRFileOrderType" value="FILENAME_VALUE"/>
                  <enum name="patternType" storable-id="dr.DRFilenamePatternSelection" value="POSITION"/>
                  <string name="regExp" null="true"/>
                  <enum name="sortOrder" storable-id="dr.DRSortOrder" value="ASCENDING"/>
                  <enum name="sortType" storable-id="dr.DRFilenameSortType" value="ALPHANUMERIC"/>
                  <int name="startPos" value="0"/>
               </storable>
            </storable>
            <storable name="2" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.wfc.ultra.server.service.RealtimeDecoderInsp]]></string>
               <storable name="Data" storable-id="dr.RealtimeDecoderConfig" ver="11.0">
                  <object name="decoderConfig">
                     <null name="Object Internal"/>
                  </object>
                  <string name="decoderName" value="CM_AcuitiPort.ULF_AcuitiPort.citFileConstructed"/>
                  <boolean name="doFullDecode" value="false"/>
               </storable>
            </storable>
            <storable name="3" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.misc.compression.DecompressionServiceInsp]]></string>
               <storable name="Data" storable-id="dr.CompressionServiceConfig" ver="12.0">
                  <string name="algorithm" value="No Compression"/>
                  <storable name="pluginConfig" null="true"/>
               </storable>
            </storable>
         </array>
         <string name="Name" value="From_Filter"/>
      </storable>
      <storable name="1" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
               <storable name="Data" storable-id="dr.StuffyMapperData" ver="10.0">
                  <string name="sourceCode"><![CDATA[import ultra.CM_AcuitiPort.ULF_AcuitiPort;
import apl.CM_AcuitiPort.APL_CC_Mapping;
import ultra.SAP_RFC.CM_AcuitiPort.PRF_RFC_ZFICA;
import ultra.SAP_RFC.CM_AcuitiPort.PRF_RFC_ZFICA.subUdr;
import apl.CM_AcuitiPort.APL_Company_Maps;
import ultra.CM_AcuitiPort.ULF_Company_Maps;

table compMapSharedTable = tableCreateShared("CM_AcuitiPort.PRF_Shared_Table_TB_COMPANY_MAPS");

consume {
  map < string, string > MapFromCompMap = mapCreate(string, string);
  string tempPayeeID;
  if (instanceOf(input, citFileDataTI)) {
    debug("INPUT FOR COMPANY_MAPS >>> " + input);
    citFileDataTI containerUDR = (citFileDataTI) input;

    MapFromCompMap = getPayeeFromCompanyMaps(containerUDR.ZZCATEGORY, containerUDR.ZZCONSIGNEE_ID, containerUDR.ZZEVENT_NAME, containerUDR.ZZFREIGHT_KIND, containerUDR.ZZLINE_ID, containerUDR.ZZSHIPPER_ID, containerUDR.ZZSPCL_STOW, containerUDR.ZZVESSEL_LINE, containerUDR.ZZVESSEL_SERVICE, compMapSharedTable);
    debug("The value of MapFromCompMap = " + (MapFromCompMap));
    if (mapSize(MapFromCompMap) > 0) {

      string sPayee = mapGet(MapFromCompMap, "PAYEE");
      //debug("The value of payee = " +sPayee);
      string Alternate_Payee = mapGet(MapFromCompMap, "ALTERNATE_INVOICE_PAYEE");
      //debug("The value of Alternate_Payee = " + (Alternate_Payee));
      string additionalCust = mapGet(MapFromCompMap, "ADDITIONAL_CUSTOMER");
      //debug("The value of additionalCust = " + (additionalCust));
      if (sPayee != "-") { ////TARIFF_PARTY found from TB_COMPANY_MAPS_UNIT_MARINE
        Alternate_Payee = Alternate_Payee == "-" ? "" : Alternate_Payee;
        additionalCust = additionalCust != "-" ? additionalCust : "";
        ZSOM_TECHID_ACUITIPORT_GET_UDR rfcCIUdr = getTechIdentifier(containerUDR, sPayee);
        debug("payee ::" + sPayee);
        udrRoute(rfcCIUdr, "toRFC");
      } else { //Check in CompanyType for getting the Default payer                        
        string sCompanyNameType = mapGet(MapFromCompMap, "INVOICE_COMPANY_TYPE");
        string sPayeeId = sCompanyNameType == "LINE_ID" ? containerUDR.ZZLINE_ID : sCompanyNameType == "CONSIGNEE_ID" ? containerUDR.ZZCONSIGNEE_ID : sCompanyNameType == "SHIPPER_ID" ? containerUDR.ZZSHIPPER_ID : sCompanyNameType == "VESSEL_LINE" ? containerUDR.ZZVESSEL_LINE : "";
        if (sPayeeId != "-") {
          Alternate_Payee = Alternate_Payee == "-" ? "" : Alternate_Payee;
          additionalCust = additionalCust == "-" ? "" : additionalCust;
          ZSOM_TECHID_ACUITIPORT_GET_UDR rfcCIUdr = getTechIdentifier(containerUDR, sPayeeId);
          debug("payeeId ::" + sPayeeId);
          udrRoute(rfcCIUdr, "toRFC");
        }
      }
    } else {
      debug("No Payee ID found in Company Map");
    }

  }
}]]></string>
                  <array classname="com.digitalroute.devkit.drudr.DRTypeInfo" name="udrTypes" size="1">
                     <storable name="0" storable-id="dr.UltraClientInfo" ver="1.0">
                        <string name="FormatName" value="CM_AcuitiPort.ULF_AcuitiPort"/>
                        <string name="TypeName" value="CM_AcuitiPort.ULF_AcuitiPort.citFileDataTI"/>
                     </storable>
                  </array>
               </storable>
            </storable>
         </array>
         <string name="Name" value="compMap_SOMReq"/>
      </storable>
      <storable name="2" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.rfc.agent.SAPJCoRFCAgentInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.rfc.agent.SAPJCoRFCAgentInsp"/>
               <storable name="Data" storable-id="rfc.agent.contract" ver="10.0">
                  <int name="cacheExpiry" value="120"/>
                  <int name="cacheSize" value="1000"/>
                  <boolean name="enableConnectionPool" value="false"/>
                  <boolean name="enableImmediateStop" value="false"/>
                  <int name="executorSize" value="5"/>
                  <int name="jCoPeakLimit" value="2"/>
                  <int name="jCoPoolCapacity" value="2"/>
                  <int name="queueSize" value="1000"/>
                  <storable name="rfcProfile" storable-id="dr.DRConfiguration" ver="2.0">
                     <set name="Dynamic Parameters" null="true"/>
                     <string name="Folder" value="CM_AcuitiPort"/>
                     <string name="Key" value="MZ1655892219561"/>
                     <string name="Name" value="PRF_RFC_ZFICA"/>
                     <string name="Type" value="SAP RFC Profile"/>
                  </storable>
               </storable>
            </storable>
         </array>
         <string name="Name" value="SOM_RFC_Processor"/>
      </storable>
      <storable name="3" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
               <storable name="Data" storable-id="dr.StuffyMapperData" ver="10.0">
                  <string name="sourceCode"><![CDATA[import ultra.CM_AcuitiPort.ULF_AcuitiPort;
import apl.CM_AcuitiPort.APL_CC_Mapping;
import ultra.SAP_RFC.CM_AcuitiPort.PRF_RFC_ZFICA;
import ultra.SAP_RFC.CM_AcuitiPort.PRF_RFC_ZFICA.subUdr;
import apl.CM_AcuitiPort.APL_Audit;
import apl.CM_AcuitiPort.APL_Processing_V1;
import ultra.CM_AcuitiPort.ULF_Audit;
import ultra.sapcc;

consume {
  string incFileName = (string) mimGet("DepEvent", "incFileNameMim");
  string wflName = (string) mimGet("Workflow", "Workflow Name");
  string incFileTime = (string) mimGet("DepEvent", "incFileTimeMim");
  string unit_event_gkey, eventname, cont_ves_id, filterWFLFlag, proWFLFag, remark;
  date cstm_dec_dttm, lst_chrg_dttm, wrk_end_dttm, wrk_strt_dttm, tm_in, tm_out, shp_arr_dttm, shp_dep_dttm, citdt_frm, citdt_to;
  double gr_ton, tu, ct_qty;
  //Response of technical Identifier RFC
  if (instanceOf(input, ZSOM_TECHID_ACUITIPORT_GET_UDR)) {
    //debug("Technical Identifier response: "+input);
    ZSOM_TECHID_ACUITIPORT_GET_UDR rfcUDR = (ZSOM_TECHID_ACUITIPORT_GET_UDR) input;
    string sTechnicalId, sBP, sCA;
    exportParams_ZSOM_TECHID_ACUITIPORT_GET exportParams = (exportParams_ZSOM_TECHID_ACUITIPORT_GET) rfcUDR.exportParams;
    citFileDataTI citFileUdr1 = (citFileDataTI) rfcUDR.context;
    debug("Technical Identifier response for GKEY = " + citFileUdr1.ZZEVENT_GKEY + " is = " + input);
    eventname = citFileUdr1.ZZEVENT_NAME;
    unit_event_gkey = citFileUdr1.ZZUNIT_GKEY;
    cont_ves_id = citFileUdr1.ZZCONTAINER_ID;
    if (udrIsPresent(exportParams.EX_OUTPUT) && listSize(exportParams.EX_OUTPUT) > 0) {
      //debug("The value of listSize(exportParams.EX_OUTPUT) = " + (listSize(exportParams.EX_OUTPUT)));
      //debug("The value of exportParams.EX_OUTPUT_1 = " + (exportParams.EX_OUTPUT));
      list < ZAP_T_TECHID_OUTPUT > outLi = listCreate(ZAP_T_TECHID_OUTPUT);
      outLi = exportParams.EX_OUTPUT;
      //debug("The value of (string)listGet(outLi,0) = " + ((string)listGet(outLi,0)));
      for (ZAP_T_TECHID_OUTPUT outList: outLi) {
        debug("outList.BP strTrim() :: " + strTrim(outList.SOLD_TO_PARTY));
        debug("outList.TECH_ID strTrim() :: " + strTrim(outList.TECH_ID));
        debug("outList.CA strTrim() :: " + strTrim(outList.VKONT));
        sBP = outList.SOLD_TO_PARTY;
        sTechnicalId = outList.TECH_ID;
        sCA = outList.VKONT;
      }
      debug("BusinessPartner: " + sBP + " TechnicalID: " + sTechnicalId + " sCA: " + sCA);

      if (sTechnicalId != null) {

        CCCycleUDR ccUDR = udrCreate(CCCycleUDR);
        ChargeUDR chargeUDR = udrCreate(ChargeUDR);

        gr_ton = (double) citFileUdr1.ZZGROSS_TON;
        tu = (double) citFileUdr1.ZZTEU;
        ct_qty = (double) citFileUdr1.CIT_QUANTITY;
        citFileUdr1.ZZPAYEE_ID = sTechnicalId;
        debug("The Length of IS_REEFER before checkcharge " + strLength(citFileUdr1.ZZIS_REEFER), "for the EVENT_GKEY" + citFileUdr1.ZZEVENT_GKEY);
        chargeUDR = sendContainerCICV1(citFileUdr1.ZZAGENT1, citFileUdr1.ZZBILL_LADING, citFileUdr1.ZZBOOKING_NUMBER, citFileUdr1.ZZCATEGORY, citFileUdr1.ZZCONSIGNEE_ID, citFileUdr1.ZZCONTAINER_ID, citFileUdr1.ZZCSTMDCDAT, citFileUdr1.ZZCSTMDECNO, citFileUdr1.ZZENDDATEFLAG, citFileUdr1.ZZEQUIPTYPE, citFileUdr1.ZZEVENT_CAT, citFileUdr1.ZZEVENT_GKEY, citFileUdr1.ZZEVENT_NAME, citFileUdr1.ZZFREIGHT_KIND, gr_ton, citFileUdr1.ZZIBVISIT_ID, citFileUdr1.ZZISO_GRP, citFileUdr1.ZZISO_LEN, citFileUdr1.ZZIS_IMDG, citFileUdr1.ZZIMDGCLASS, citFileUdr1.ZZOOG, citFileUdr1.ZZLAST_PORT, citFileUdr1.ZZLINE_ID, citFileUdr1.ZZOBVISIT_ID, citFileUdr1.ZZPAYEE_ID, citFileUdr1.ZZIS_REEFER, citFileUdr1.ZZSHIPPER_ID, citFileUdr1.ZZSPCL_STOW, citFileUdr1.ZZSUBCON_ID, citFileUdr1.ZZTERMINALID, citFileUdr1.ZZUNIT_GKEY, citFileUdr1.ZZVESSEL_ID, citFileUdr1.ZZVESSEL_LENGTH, citFileUdr1.ZZVESSEL_LINE, citFileUdr1.ZZVESSEL_NAME, citFileUdr1.ZZVESSEL_SERVICE, citFileUdr1.ZZVESSEL_TYPE, tu, citFileUdr1.ZZVISIT_ID, citFileUdr1.ZZGKEY_TYPE, citFileUdr1.ZZLASTCHARGEDTIME, citFileUdr1.ZZWORK_ENDDTTM, citFileUdr1.ZZWORK_STRTDTTM, citFileUdr1.ZZTIME_IN, citFileUdr1.ZZTIME_OUT, citFileUdr1.ZZSHIPARR_DATETIME, citFileUdr1.ZZSHIPDEP_DATETIME, citFileUdr1.ZZIBCARRIER_TYPE, citFileUdr1.ZZOBCARRIER_TYPE, citFileUdr1.ZZPHASE, citFileUdr1.ZZDELIVERY_DTTM, ct_qty, citFileUdr1.CIT_QTY_UNIT, citFileUdr1.CITDATE_FROM, citFileUdr1.CITDATE_TO, citFileUdr1.CITTYPE);
        chargeUDR.chargeExecutionContext = udrCreate(ChargeExecutionContextUDR);
        chargeUDR.chargeExecutionContext.resultNotificationReturned = true;
        chargeUDR.chargeExecutionContext.resultResponseItemReturned = true;
        chargeUDR.chargeExecutionContext.resultChargedItemReturned = true;
        ccUDR.request = chargeUDR;
        ccUDR.freeField = citFileUdr1;
        udrRoute(ccUDR, "toCC");

      }
    }

  } else {
    filterWFLFlag = "Y";
    proWFLFag = "N";
    remark = "Technical ID not found";
    auditInfoTI auditdataUDR = udrCreate(auditInfoTI);
    auditdataUDR = maptoauditdata(incFileName, wflName, incFileTime, eventname, unit_event_gkey, cont_ves_id, filterWFLFlag, proWFLFag, remark);
    debug("IN THE AUDIT PART::" + auditdataUDR);
    udrRoute(auditdataUDR, "toAuditEnc");
  }
}]]></string>
                  <array classname="com.digitalroute.devkit.drudr.DRTypeInfo" name="udrTypes" size="2">
                     <storable name="0" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="RfcErrorUDR"/>
                     </storable>
                     <storable name="1" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName"><![CDATA[SAP_RFC.CM_AcuitiPort.PRF_RFC_ZFICA.ZSOM_TECHID_ACUITIPORT_GET_UDR]]></string>
                     </storable>
                  </array>
               </storable>
            </storable>
         </array>
         <string name="Name" value="SOMRes_DepMap_wsReq"/>
      </storable>
      <storable name="4" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname"><![CDATA[com.digitalroute.wfc.ultra.UltraEncoderRealtimeInsp]]></string>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.wfc.ultra.UltraEncoderRealtimeInsp]]></string>
               <storable name="Data" storable-id="dr.UltraEncoderDataValidation" ver="12.0">
                  <storable name="encoderConfig" null="true"/>
                  <string name="encoderName" value="CM_AcuitiPort.ULF_Audit.auditInfo_encoder"/>
                  <boolean name="skipEncoding" value="false"/>
               </storable>
            </storable>
         </array>
         <string name="Name" value="auditEnc"/>
      </storable>
      <storable name="5" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname"><![CDATA[com.digitalroute.batchrt.forw.disk.BatchForwRtDiskInsp]]></string>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="2">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.batchrt.forw.disk.BatchForwRtDiskInsp]]></string>
               <storable name="Data" storable-id="dr.batchforwrt.BatchForwRtBaseData" ver="20.0">
                  <storable name="agentData" storable-id="dr.DiskOutputData" ver="13.0">
                     <string name="arguments" value=""/>
                     <string name="command" value=""/>
                     <enum name="compType" storable-id="dr.CompressionType" value="NONE"/>
                     <boolean name="createEmpty" value="false"/>
                     <boolean name="createNonExistingBaseDir" value="false"/>
                     <string name="directory" value="/home/mzadmin/AcuitiPort/Container/Audit"/>
                     <enum name="inputType" storable-id="dr.InputType" value="ByteArray"/>
                  </storable>
                  <int name="closingCriteriaByteCount" value="0"/>
                  <int name="closingCriteriaDuration" value="0"/>
                  <int name="closingCriteriaUdrCount" value="0"/>
               </storable>
            </storable>
            <storable name="1" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.devkit.wf.DRFNTServiceInsp"/>
               <storable name="Data" storable-id="dr.DRFNTServiceConfig" ver="11.0">
                  <boolean name="createNonExistDirectories" value="true"/>
                  <array classname="com.digitalroute.devkit.hidden.DRFNTServiceEntry" name="entries" size="2">
                     <storable name="0" storable-id="dr.DRFNTServiceEntry" ver="3.0">
                        <int name="Alignment" value="1"/>
                        <string name="Date format" null="true"/>
                        <boolean name="Delimiter" value="false"/>
                        <string name="Mim entry" null="true"/>
                        <string name="Pad" null="true"/>
                        <int name="Size" value="-1"/>
                        <string name="Trailing separator" null="true"/>
                        <string name="User entry" value="AUDIT_"/>
                     </storable>
                     <storable name="1" storable-id="dr.DRFNTServiceEntry" ver="3.0">
                        <int name="Alignment" value="1"/>
                        <string name="Date format" null="true"/>
                        <boolean name="Delimiter" value="false"/>
                        <string name="Mim entry" value="DepEvent.incFileNameMim"/>
                        <string name="Pad" null="true"/>
                        <int name="Size" value="-1"/>
                        <string name="Trailing separator" null="true"/>
                        <string name="User entry" null="true"/>
                     </storable>
                  </array>
                  <boolean name="fNTListEnabled" value="true"/>
               </storable>
            </storable>
         </array>
         <string name="Name" value="auditDir"/>
      </storable>
      <storable name="6" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
               <storable name="Data" storable-id="dr.StuffyMapperData" ver="10.0">
                  <string name="sourceCode"><![CDATA[import ultra.CM_AcuitiPort.ULF_AcuitiPort;
import apl.CM_AcuitiPort.APL_CC_Mapping;
import apl.CM_AcuitiPort.APL_Dependent_Event;

mimPublish(global, "incFileNameMim", string);
mimPublish(global, "incFileTimeMim", string);

table dpndntMapSharedTable = tableCreateShared("CM_AcuitiPort.PRF_Shared_Table_TB_DEPENDENT_TABLE");

consume {
  string incFileName = (string) mimGet("From_Filter", "Source Filename");
  string incFileTime = (string) mimGet("From_Filter", "File Retrieval Timestamp");
  mimSet("incFileNameMim", incFileName);
  mimSet("incFileTimeMim", incFileTime);

  list < string > dpndntEvntLi = listCreate(string);

  if (instanceOf(input, citFileDataTI)) {
    debug("INPUT>>> " + input);
    citFileDataTI containerUDR = (citFileDataTI) input;

    if (containerUDR.ZZPHASE == "ARRIVED" || containerUDR.ZZPHASE == "DEPARTED") {
      containerUDR.ZZEVENT_NAME = containerUDR.ZZPHASE;
    }
    udrRoute(containerUDR, "toA2");
    dpndntEvntLi = returnDependentEvents(containerUDR.ZZEVENT_NAME, containerUDR.ZZLINE_ID, containerUDR.ZZCATEGORY, containerUDR.ZZFREIGHT_KIND, containerUDR.ZZSPCL_STOW, containerUDR.ZZIS_REEFER, dpndntMapSharedTable);
    debug("The value of dpndntEvntLi = " + (dpndntEvntLi));
    if (listSize(dpndntEvntLi) > 0) {
      for (string dpndntEvntList: dpndntEvntLi) {
        citFileDataTI containerUDRclone = udrClone(containerUDR);
        containerUDRclone.ZZEVENT_NAME = dpndntEvntList;
        containerUDRclone.ZZGKEY_TYPE = "D";
        containerUDRclone.ZZSUBCON_ID = "";
        udrRoute(containerUDRclone, "toA2");
      }
    } else {
      debug("Dependent events not found for parent event : " + containerUDR.ZZEVENT_NAME);
      //udrRoute(containerUDR,"toA2");
    }
  }
}]]></string>
                  <array classname="com.digitalroute.devkit.drudr.DRTypeInfo" name="udrTypes" size="4">
                     <storable name="0" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="BatchRT.BeginBatch"/>
                     </storable>
                     <storable name="1" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="BatchRT.CancelBatch"/>
                     </storable>
                     <storable name="2" storable-id="dr.UltraClientInfo" ver="1.0">
                        <string name="FormatName" value="CM_AcuitiPort.ULF_AcuitiPort"/>
                        <string name="TypeName" value="CM_AcuitiPort.ULF_AcuitiPort.citFileDataTI"/>
                     </storable>
                     <storable name="3" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="BatchRT.EndBatch"/>
                     </storable>
                  </array>
               </storable>
            </storable>
         </array>
         <string name="Name" value="DepEvent"/>
      </storable>
      <storable name="7" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.wfc.analysis.AnalysisRealtimeInsp"/>
               <storable name="Data" storable-id="dr.StuffyMapperData" ver="10.0">
                  <string name="sourceCode"><![CDATA[import ultra.sapcc.batch;
import ultra.sapcc;
import apl.CM_AcuitiPort.APL_Audit;
import ultra.CM_AcuitiPort.ULF_Audit;
import ultra.CM_AcuitiPort.ULF_AcuitiPort;
consume {
  if (instanceOf(input, CCCycleUDR)) {
    string incFileName = (string) mimGet("DepEvent", "incFileNameMim");
    string wflName = (string) mimGet("Workflow", "Workflow Name");
    string incFileTime = (string) mimGet("DepEvent", "incFileTimeMim");
    string unit_event_gkey, eventname, cont_ves_id, filterWFLFlag, proWFLFag, remark;
    debug("Response of CC :: " + input);
    CCCycleUDR ccCycle = (CCCycleUDR) input;
    citFileDataTI usUDRinfo = (citFileDataTI) ccCycle.freeField;
    if (instanceOf(ccCycle.answer, ChargingResultUDR)) {
      ChargingResultUDR resUDR = (ChargingResultUDR) ccCycle.answer;
      //debug("Charging Result is " + resUDR);
      list < NotificationUDR > notifierList = listCreate(NotificationUDR);
      notifierList = resUDR.notifications;
      //debug("Notification list is " + notifierList);
    } else if (instanceOf(ccCycle.answer, PurchaseOrderUDR)) {
      PurchaseOrderUDR resUDR = (PurchaseOrderUDR) ccCycle.answer;
      //debug("Purchase Order UDR is " + resUDR);
      list < NotificationUDR > notifierList = listCreate(NotificationUDR);
      notifierList = resUDR.allNotifications;
      //insertSuccessRespDB(usUDRinfo);
      //debug("Notification list is " + notifierList);
    } else if (instanceOf(ccCycle.answer, CCExceptionUDR)) {
      CCExceptionUDR ccExptionUDR = (CCExceptionUDR) ccCycle.answer;

      debug("Exception if any is " + ccExptionUDR);
      debug("The value of usUDRinfo = " + (usUDRinfo));
      filterWFLFlag = "Y";
      proWFLFag = "N";
      remark = "Acquire UDR Failed";
      auditInfoTI auditdataUDR = udrCreate(auditInfoTI);
      auditdataUDR = maptoauditdata(incFileName, wflName, incFileTime, eventname, unit_event_gkey, cont_ves_id, filterWFLFlag, proWFLFag, remark);
      debug("IN THE AUDIT PART::" + auditdataUDR);
      udrRoute(auditdataUDR, "toAuditEnc");

      //    ccExptionUDR.message, ccExptionUDR.reasonCode, ccExptionUDR.reason, ccExptionUDR.type
    }
  }
}]]></string>
                  <array classname="com.digitalroute.devkit.drudr.DRTypeInfo" name="udrTypes" size="1">
                     <storable name="0" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="sapcc.CCCycleUDR"/>
                     </storable>
                  </array>
               </storable>
            </storable>
         </array>
         <string name="Name" value="CC_Response_"/>
      </storable>
      <storable name="8" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname"><![CDATA[com.digitalroute.mediationZoneIntegration.agent.online.SAPCCOnlineProcessorInsp]]></string>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.mediationZoneIntegration.agent.online.SAPCCOnlineProcessorInsp]]></string>
               <storable classname="com.digitalroute.mediationZoneIntegration.agent.online.VersionSafeSAPCCOnlineProcessorConfig" name="Data" ver="10.0">
                  <boolean name="apiAuthentication" value="true"/>
                  <boolean name="convertStr" value="false"/>
                  <boolean name="enableDebug" value="true"/>
                  <boolean name="enableGlobalEvent" value="false"/>
                  <boolean name="enableRARListener" value="false"/>
                  <boolean name="enableSecuredConnection" value="false"/>
                  <boolean name="enableSpendingStatusMonitoring" value="false"/>
                  <boolean name="enableSpotEvent" value="false"/>
                  <int name="expectedAvgLatency" value="1"/>
                  <boolean name="flowControlEnabled" value="false"/>
                  <int name="frequency" value="1000"/>
                  <string name="host" null="true"/>
                  <string name="hosts" value="172.16.16.37:2000"/>
                  <password name="keystorePassword" value="DR-4-017BB0B8FB061C1876D43DD75468AA40"/>
                  <string name="keystorePath" value=""/>
                  <boolean name="latencyControllerEnable" value="false"/>
                  <password name="password" value="DR-4-F35CF3D5EB78FFB4129FE4DBD96D9626"/>
                  <int name="port" value="0"/>
                  <int name="queueSize" value="1"/>
                  <int name="queueSizeToNotify" value="1"/>
                  <int name="rARListenerId" value="1"/>
                  <enum classname="com.digitalroute.mediationZoneIntegration.connection.types.ResultType" name="sessionCleanupTransactionSetToReturn" value="noTransaction"/>
                  <enum classname="com.digitalroute.mediationZoneIntegration.connection.types.ResolutionMode" name="sessionResolution" value="cancel"/>
                  <long name="sessionTTL" value="300"/>
                  <int name="spendingStatusMonitoringDefaultListenerId" value="1"/>
                  <int name="spendingStatusMonitoringListenerId" value="1"/>
                  <int name="spendingStatusMonitoringSessionDefaultTTL" value="86400"/>
                  <int name="timeout" value="2000"/>
                  <enum classname="com.digitalroute.mediationZoneIntegration.connection.types.ResultType" name="transactionSetToReturn" value="noTransaction"/>
                  <string name="username" value="CC_Webservice"/>
               </storable>
            </storable>
         </array>
         <string name="Name" value="CC_Processing"/>
      </storable>
   </list>
   <storable name="Persistent" storable-id="dr.WorkflowPersistentConfig" ver="10.0">
      <string name="persistentInspector" null="true"/>
      <storable name="persistentStorageConfig" null="true"/>
      <string name="persistentTimeoutHandler" null="true"/>
   </storable>
   <list classname="java.util.ArrayList" name="Routes">
      <storable name="0" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toRFC"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="1" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toA2"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="2" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toAuditDir"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="3" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toA1"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="4" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toA2"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="5" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toCC"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="6" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="r_23"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="7" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toAuditEnc"/>
         <int name="Realtime mode" value="0"/>
      </storable>
      <storable name="8" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="toAuditEnc"/>
         <int name="Realtime mode" value="0"/>
      </storable>
   </list>
   <list classname="java.util.ArrayList" name="Service"/>
   <boolean name="Template Valid" value="true"/>
   <storable name="Thread data" storable-id="dr.WorkflowExecutionRealtimeConfig" ver="10.0">
      <int name="countInterval" value="1"/>
      <int name="queueSize" value="1000"/>
      <string name="queueStrategy" value="Blocking queue"/>
      <string name="queueWorkerStrategy" value="RoundRobin"/>
      <boolean name="standalone" value="true"/>
      <int name="threads" value="8"/>
   </storable>
</exportmultiplex>
